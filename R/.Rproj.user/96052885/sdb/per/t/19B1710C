{
    "contents" : "install.packages(\"caret\")\nlibrary(caret)\n\nstr(d, list.len=ncol(d))\nstr(test, list.len=ncol(test))\n\nd$Train_Flag    <- 1  #Add in a flag to identify if observations fall in train data, 1 train, 0 test\ntest$Response   <- NA #Add in a column for Response in the test data and initialize to NA\ntest$Train_Flag <- 0  #Add in a flag to identify if observations fall in train data, 1 train, 0 test\n\nAll_Data <- rbind(d,test) #79,146 observations, 129 variables \nAll_Data_bk <- All_Data\n\nstr(All_Data, list.len=ncol(All_Data))\n\n# NAN Strategy : mean -------------------------------------------------------------\n# Employment_Info_1\nsummary(All_Data$Employment_Info_1)\n#All_Data$Employment_Info_1_na <- ifelse(is.na(All_Data$Employment_Info_1), 1, 0 )\nAll_Data$Employment_Info_1    <- ifelse(is.na(All_Data$Employment_Info_1),\n                                        mean(na.omit(All_Data$Employment_Info_1)), \n                                        All_Data$Employment_Info_1 )\n# Employment_Info_4 \nsummary(All_Data$Employment_Info_4)\nAll_Data$Employment_Info_4    <- ifelse(is.na(All_Data$Employment_Info_4),\n                                        mean(na.omit(All_Data$Employment_Info_4)),\n                                        All_Data$Employment_Info_4 )\n# Employment_Info_6\nsummary(All_Data$Employment_Info_6)\nAll_Data$Employment_Info_6    <- ifelse(is.na(All_Data$Employment_Info_6),\n                                        mean(na.omit(All_Data$Employment_Info_6)), \n                                        All_Data$Employment_Info_6 )\n#Insurance_History_5\nsummary(All_Data$Insurance_History_5)\nAll_Data$Insurance_History_5    <- ifelse(is.na(All_Data$Insurance_History_5),\n                                          mean(na.omit(All_Data$Insurance_History_5)), \n                                          All_Data$Insurance_History_5 )\n# Family_Hist_2\nsummary(All_Data$Family_Hist_2) \nAll_Data$Family_Hist_2    <- ifelse(is.na(All_Data$Family_Hist_2),\n                                    mean(na.omit(All_Data$Family_Hist_2)),  \n                                    All_Data$Family_Hist_2 )\n# Family_Hist_3\nsummary(All_Data$Family_Hist_3) \nAll_Data$Family_Hist_3    <- ifelse(is.na(All_Data$Family_Hist_3),\n                                    mean(na.omit(All_Data$Family_Hist_3)),   \n                                    All_Data$Family_Hist_3 )\n# Family_Hist_4\nsummary(All_Data$Family_Hist_4) \nAll_Data$Family_Hist_4    <- ifelse(is.na(All_Data$Family_Hist_4),\n                                    mean(na.omit(All_Data$Family_Hist_4)),   \n                                    All_Data$Family_Hist_4 )\n# Medical_History_1\nsummary(All_Data$Medical_History_1) \nAll_Data$Medical_History_1    <- ifelse(is.na(All_Data$Medical_History_1),\n                                        mean(na.omit(All_Data$Medical_History_1)),  \n                                        All_Data$Medical_History_1 )\n# Medical_History_15\nsummary(All_Data$Medical_History_15) \nAll_Data$Medical_History_15    <- ifelse(is.na(All_Data$Medical_History_15),\n                                         mean(na.omit(All_Data$Medical_History_15)), \n                                         All_Data$Medical_History_15 )\n# Family_Hist_5\nsummary(All_Data$Family_Hist_5)\nAll_Data$Family_Hist_5    <- ifelse(is.na(All_Data$Family_Hist_5),\n                                    mean(na.omit(All_Data$Family_Hist_5)),  \n                                    All_Data$Family_Hist_5 )\n# Medical_History_24\nsummary(All_Data$Medical_History_24)\nAll_Data$Medical_History_24    <- ifelse(is.na(All_Data$Medical_History_24),\n                                         mean(na.omit(All_Data$Medical_History_24)), \n                                         All_Data$Medical_History_24 )\n# Medical_History_32\nsummary(All_Data$Medical_History_32)\nAll_Data$Medical_History_32    <- ifelse(is.na(All_Data$Medical_History_32),\n                                         mean(na.omit(All_Data$Medical_History_32)),  \n                                         All_Data$Medical_History_32 )\n# Medical_History_10\nsummary(All_Data$Medical_History_10)\nAll_Data$Medical_History_10    <- ifelse(is.na(All_Data$Medical_History_10),\n                                         mean(na.omit(All_Data$Medical_History_10)), \n                                         All_Data$Medical_History_10 )\n# backup\nAll_Data_fulfill_bk <- All_Data\n\n#=== [0, 1] Normalization ( Numerical var. ONLY) ===================================\nfeatures<-colnames(All_Data)[!(colnames(All_Data) %in% c(\"Id\",\"Response\",\"Train_Flag\"))]\n\nAll_Data.scl <- data.frame(Id=All_Data$Id, Response=All_Data$Response, Train_Flag=All_Data$Train_Flag) \nfor (f in features) {\n  if (class(All_Data[[f]])!=\"factor\") {\n    cat(f,  class(All_Data[[f]]),\":normalizing process wil be done. \\n\")\n    All_Data.scl[[f]] <- as.numeric(scale(All_Data[[f]], \n                               center = min(All_Data[[f]]),\n                               scale = max(All_Data[[f]]) - min(All_Data[[f]])) )\n  }else {\n    cat(f, class(All_Data[[f]]),\":nothing to do \\n\")\n    All_Data.scl[[f]] <- All_Data[[f]]\n  }\n}\n\nstr(All_Data.scl)\nsummary(All_Data.scl)\n\n\n#=== Convert categorical variables to dummy ===================================\nAll_Data.tmp <- dummyVars(~., data=All_Data.scl)\nAll_Data.for.pylearn2 <- as.data.frame(predict(All_Data.tmp, All_Data.scl))\n\nsummary(All_Data.for.pylearn2)\nstr(All_Data.for.pylearn2)\n\n\n#=== Target variable must be counted from zero because of pylearn2 requirement\nAll_Data.for.pylearn2$Response <- ifelse(All_Data.for.pylearn2$Response==1, 0, All_Data.for.pylearn2$Response)\nAll_Data.for.pylearn2$Response <- ifelse(All_Data.for.pylearn2$Response==2, 1, All_Data.for.pylearn2$Response)\nAll_Data.for.pylearn2$Response <- ifelse(All_Data.for.pylearn2$Response==3, 2, All_Data.for.pylearn2$Response)\nAll_Data.for.pylearn2$Response <- ifelse(All_Data.for.pylearn2$Response==4, 3, All_Data.for.pylearn2$Response)\nAll_Data.for.pylearn2$Response <- ifelse(All_Data.for.pylearn2$Response==5, 4, All_Data.for.pylearn2$Response)\nAll_Data.for.pylearn2$Response <- ifelse(All_Data.for.pylearn2$Response==6, 5, All_Data.for.pylearn2$Response)\nAll_Data.for.pylearn2$Response <- ifelse(All_Data.for.pylearn2$Response==7, 6, All_Data.for.pylearn2$Response)\nAll_Data.for.pylearn2$Response <- ifelse(All_Data.for.pylearn2$Response==8, 7, All_Data.for.pylearn2$Response)\n\n# Separate \"All_Data\" to \"train\" $ \"test\"\ntrain.for.pylearn2 <- All_Data.for.pylearn2[All_Data.for.pylearn2$Train_Flag==1, -c(1,3)]\ntest.for.pylearn2  <- All_Data.for.pylearn2[All_Data.for.pylearn2$Train_Flag==0, -c(1,3)]\ntest.for.pylearn2$Response <- 0\n\n#=== Separate \"train.for.pylearn2\" to large, mini & valid ===============\nsmp_size <- floor(0.8 * nrow(train.for.pylearn2))\nset.seed(123)\ntrain_rows <- sample(seq_len(nrow(train.for.pylearn2)), size = smp_size)\ntrain_large  <- train.for.pylearn2[train_rows, ]          # 80% of train data\ntrain_mini   <- train.for.pylearn2[sample(1:nrow(train.for.pylearn2), 1000), ]\nvalid_large  <- train.for.pylearn2[-train_rows, ]         # rest data (20%)\nvalid <- valid_large[sample(1:nrow(valid_large),1000),]\n# Sampling test data having only 10 rows to make coding be easy\ntest_mini    <- test.for.pylearn2[c(1:10),]\n\n# Make csv files\nwrite.csv(train_large,       \"out_for_pylearn2/train.csv\",       row.names=F)\nwrite.csv(train_mini,        \"out_for_pylearn2/train_mini.csv\",  row.names=F)\nwrite.csv(valid,             \"out_for_pylearn2/valid.csv\",       row.names=F)\nwrite.csv(test.for.pylearn2, \"out_for_pylearn2/test.csv\",        row.names=F)\nwrite.csv(test_mini,         \"out_for_pylearn2/test_mini.csv\",   row.names=F)\n\n\n",
    "created" : 1450800812860.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1917387144",
    "id" : "19B1710C",
    "lastKnownWriteTime" : 1450800792,
    "path" : "~/tortoise/prudential/R/12.pydata2.R",
    "project_path" : "12.pydata2.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}